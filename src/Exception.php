<?php
/**
 * O2Glob
 *
 * Singleton Global Class Libraries for PHP 5.4 or newer
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2014, PT. Lingkar Kreasi (Circle Creative).
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ||
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS || COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES || OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT || OTHERWISE, ARISING FROM,
 * OUT OF || IN CONNECTION WITH THE SOFTWARE || THE USE || OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package        O2System
 * @author         Steeven Andrian Salim
 * @copyright      Copyright (c) 2005 - 2014, PT. Lingkar Kreasi (Circle Creative).
 * @license        http://o2system.in/features/standalone/o2glob/license.html
 * @license        http://opensource.org/licenses/MIT	MIT License
 * @link           http://o2system.in
 * @since          Version 1.0
 * @filesource
 */

// ------------------------------------------------------------------------

namespace O2System\Glob;

// ------------------------------------------------------------------------

use O2System\Gears\Tracer;

/**
 * Exception
 *
 * @package        o2glob
 * @category       Core Class
 * @author         Circle Creative Dev Team
 * @link           http://o2system.in/features/standalone/o2glob/user-guide/exception.html
 */
class Exception extends \Exception
{
    protected        $message = NULL;
    protected        $code    = 500;
    protected        $file    = NULL;
    protected        $line    = NULL;
    protected static $_logger = NULL;

    protected static $_debug_enabled = FALSE;

    protected static $_view_paths;

    /**
     * List of logging levels
     *
     * @access protected
     * @type array
     */
    protected static $_severity_errors = array(
        E_ERROR             => array(
            'header'      => 'Error',
            'description' => 'Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.'
        ),
        E_WARNING           => array(
            'header'      => 'Warning',
            'description' => 'Run-time warnings (non-fatal errors). Execution of the script is not halted.'
        ),
        E_PARSE             => array(
            'header'      => 'Parse',
            'description' => 'Compile-time parse errors. Parse errors should only be generated by the parser.'
        ),
        E_NOTICE            => array(
            'header'      => 'Notice',
            'description' => 'Run-time notices. PHP encountered something that could indicate an error, but could also happen in the normal course of running a script.'
        ),
        E_CORE_ERROR        => array(
            'header'      => 'Core Error',
            'description' => 'Fatal errors that occur during PHP\'s initial startup. This is like an E_ERROR, except it is generated by the core of PHP.'
        ),
        E_CORE_WARNING      => array(
            'header'      => 'Core Warning',
            'description' => 'Warnings (non-fatal errors) that occur during PHP\'s initial startup. This is like an E_WARNING, except it is generated by the core of PHP.'
        ),
        E_COMPILE_ERROR     => array(
            'header'      => 'Compile Error',
            'description' => 'Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.'
        ),
        E_COMPILE_WARNING   => array(
            'header'      => 'Compile Warning',
            'description' => 'Warnings (non-fatal errors) that occur during PHP\'s initial startup. This is like an E_WARNING, except it is generated by the core of PHP.'
        ),
        E_USER_ERROR        => array(
            'header'      => 'User Error',
            'description' => 'User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().'
        ),
        E_USER_WARNING      => array(
            'header'      => 'User Warning',
            'description' => 'User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().'
        ),
        E_USER_NOTICE       => array(
            'header'      => 'User Notice',
            'description' => 'User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().'
        ),
        E_STRICT            => array(
            'header'      => 'Strict',
            'description' => 'Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.'
        ),
        E_RECOVERABLE_ERROR => array(
            'header'      => 'Recoverable Error',
            'description' => 'Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle, the application aborts as it was an E_ERROR.'
        ),
        E_DEPRECATED        => array(
            'header'      => 'Deprecated',
            'description' => 'This code that will not work in future versions.'
        ),
        E_USER_DEPRECATED   => array(
            'header'      => 'Deprecated',
            'description' => 'This code that will not work in future versions.'
        ),
        E_ALL               => array(
            'header'      => 'General Error',
            'description' => 'General PHP error.'
        ),
    );

    protected static $_standard_exceptions = array(
        'LogicException'           => array(
            'header'      => 'Logic Exception',
            'template'    => 'logic_exception',
            'description' => 'Exception that represents error in the program logic. This kind of exception should lead directly to a fix in your code.'
        ),
        'BadFunctionCallException' => array(
            'header'      => 'Bad Function Call Exception',
            'template'    => 'logic_exception',
            'description' => 'Exception thrown if a callback refers to an undefined function or if some arguments are missing.'
        ),
        'BadMethodCallException'   => array(
            'header'      => 'Bad Method Call Exception',
            'template'    => 'logic_exception',
            'description' => 'Exception thrown if a callback refers to an undefined method or if some arguments are missing.'
        ),
        'DomainException'          => array(
            'header'      => 'Domain Exception',
            'template'    => 'logic_exception',
            'description' => 'Exception thrown if a value does not adhere to a defined valid data domain.'
        ),
        'InvalidArgumentException' => array(
            'header'      => 'Invalid Argument Exception',
            'template'    => 'logic_exception',
            'description' => 'Exception thrown if an argument is not of the expected type.'
        ),
        'LengthException'          => array(
            'header'      => 'Length Exception',
            'template'    => 'logic_exception',
            'description' => 'Exception thrown if a length is invalid.'
        ),
        'OutOfRangeException'      => array(
            'header'      => 'Out of Range Exception',
            'template'    => 'logic_exception',
            'description' => 'Exception thrown when an illegal index was requested. This represents errors that should be detected at compile time.'
        ),
        'RuntimeException'         => array(
            'header'      => 'Runtime Exception',
            'template'    => 'run_time_exception',
            'description' => 'Exception thrown if an error which can only be found on runtime occurs.'
        ),
        'OutOfBoundsException'     => array(
            'header'      => 'Out of Bounds Exception',
            'template'    => 'run_time_exception',
            'description' => 'Exception thrown if a value is not a valid key. This represents errors that cannot be detected at compile time.'
        ),
        'OverflowException'        => array(
            'header'      => 'Overflow Exception',
            'template'    => 'run_time_exception',
            'description' => 'Exception thrown when adding an element to a full container.'
        ),
        'RangeException'           => array(
            'header'      => 'Range Exception',
            'template'    => 'run_time_exception',
            'description' => 'Exception thrown to indicate range errors during program execution. Normally this means there was an arithmetic error other than under/overflow. This is the runtime version of DomainException.'
        ),
        'UnderflowException'       => array(
            'header'      => 'Underflow Exception',
            'template'    => 'run_time_exception',
            'description' => 'Exception thrown when performing an invalid operation on an empty container, such as removing an element.'
        ),
        'UnexpectedValueException' => array(
            'header'      => 'Unexpected Value Exception',
            'template'    => 'run_time_exception',
            'description' => 'Exception thrown if a value does not match with a set of values. Typically this happens when a function calls another function and expects the return value to be of a certain type or value not including arithmetic or buffer related errors.'
        ),
    );

    protected static $_code_headers = array(
        200 => 'OK',
        201 => 'Created',
        202 => 'Accepted',
        203 => 'Non-Authoritative Information',
        204 => 'No Content',
        205 => 'Reset Content',
        206 => 'Partial Content',

        300 => 'Multiple Choices',
        301 => 'Moved Permanently',
        302 => 'Found',
        303 => 'See Other',
        304 => 'Not Modified',
        305 => 'Use Proxy',
        307 => 'Temporary Redirect',

        400 => 'Bad Request',
        401 => 'Unauthorized',
        403 => 'Forbidden',
        404 => 'Not Found',
        405 => 'Method Not Allowed',
        406 => 'Not Acceptable',
        407 => 'Proxy Authentication Required',
        408 => 'Request Timeout',
        409 => 'Conflict',
        410 => 'Gone',
        411 => 'Length Required',
        412 => 'Precondition Failed',
        413 => 'Request Entity Too Large',
        414 => 'Request-URI Too Long',
        415 => 'Unsupported Media Type',
        416 => 'Requested Range Not Satisfiable',
        417 => 'Expectation Failed',
        422 => 'Unprocessable Entity',

        500 => 'Internal Server Error',
        501 => 'Not Implemented',
        502 => 'Bad Gateway',
        503 => 'Service Unavailable',
        504 => 'Gateway Timeout',
        505 => 'HTTP Version Not Supported'
    );

    public function __construct( $message = NULL, $code = 0, \Exception $previous = NULL )
    {
        parent::__construct( $message, $code, $previous );
    }

    public function debug_mode( $enabled = TRUE )
    {
        static::$_debug_enabled = $enabled;
    }

    public function register_logger( \O2System\Gears\Logger $logger )
    {
        static::$_logger =& $logger;
    }

    public function register_handler()
    {
        set_error_handler( '\O2System\Glob\Exception::error_handler' );
        set_exception_handler( '\O2System\Glob\Exception::exception_handler' );
        register_shutdown_function( '\O2System\Glob\Exception::shutdown_handler' );

        return $this;
    }

    public function register_path( $path )
    {
        if( is_array( $path ) )
        {
            foreach( $path as $dir )
            {
                $this->register_path( $dir );
            }
        }

        if( is_string( $path ) )
        {
            if( is_dir( $path ) )
            {
                static::$_view_paths[ ] = $path;
            }
        }

        return $this;
    }

    /**
     * General Error Page
     *
     * Takes an error message as input (either as a string or an array)
     * and displays it using the specified template.
     *
     * @param    string          $header      Page heading
     * @param    string|string[] $message     Error message
     * @param    int             $status_code (default: 500)
     *
     * @return    string    Error page output
     */
    public static function error_handler( $code, $message, $file, $line )
    {
        $code = abs( $code );

        $is_error = ( ( ( E_ERROR | E_COMPILE_ERROR | E_CORE_ERROR | E_USER_ERROR ) & $code ) === $code );

        // Should we ignore the error? We'll get the current error_reporting
        // level and add its bits with the severity bits to find out.
        if( ( $code & error_reporting() ) !== $code )
        {
            return;
        }

        if( $code < 100 )
        {
            $exit_status = $code + 9; // 9 is EXIT__AUTO_MIN
            if( $exit_status > 125 ) // 125 is EXIT__AUTO_MAX
            {
                $exit_status = 1; // EXIT_ERROR
            }

            // When an error occurred, set the status header to '500 Internal Server Error'
            // to indicate to the client something went wrong.
            // This can't be done within the $_error->show_php_error method because
            // it is only called when the display_errors flag is set (which isn't usually
            // the case in a production environment) or when errors are ignored because
            // they are above the error_reporting threshold.
            if( $is_error )
            {
                $header = static::$_code_headers[ 500 ];

                @header( 'HTTP/1.1 ' . 500 . ' ' . $header, TRUE, 500 );
            }
        }
        else
        {
            $exit_status = 1; // EXIT_ERROR
        }

        // Should we display the error?
        if( str_ireplace( array( 'off', 'none', 'no', 'false', 'null' ), '', ini_get( 'display_errors' ) ) )
        {
            $severity = static::$_severity_errors[ $code ];
            $tracer = new Tracer();

            if( PHP_SAPI === 'cli' )
            {
                $template = 'cli/severity.php';
            }
            else
            {
                $template = 'html/severity.php';
            }

            if( ! empty( static::$_view_paths ) )
            {
                foreach( array_reverse(static::$_view_paths) as $view_path )
                {
                    if( file_exists( $view_path . $template ) )
                    {
                        $template = $view_path . $template;
                        break;
                    }
                }
            }
            else
            {
                $template = __DIR__ . '/Views/' . $template;
            }

            if( ob_get_level() > 1 )
            {
                ob_end_flush();
            }

            ob_start();
            include( $template );
            $buffer = ob_get_contents();
            ob_end_clean();

            echo $buffer;
        }

        // If the error is fatal, the execution of the script should be stopped because
        // errors can't be recovered from. Halting the script conforms with PHP's
        // default error handling. See http://www.php.net/manual/en/errorfunc.constants.php
        if( $is_error )
        {
            exit( 1 ); // EXIT_ERROR
        }
    }

    /**
     * Exception Error Page
     *
     * @param    string $exception Instanceof \Exception
     *
     * @return    string    Error page output
     */
    public static function exception_handler( \Exception $exception )
    {
        $standard_exception = get_class( $exception );

        if( isset( static::$_standard_exceptions[ $standard_exception ] ) )
        {
            extract( static::$_standard_exceptions[ $standard_exception ] );
        }

        $tracer = new Tracer( (array)$exception->getTrace() );
        $template = isset( $template ) ? $template : 'logic_exception';

        if( PHP_SAPI === 'cli' )
        {
            $template = 'cli/' . $template . '.php';
        }
        else
        {
            $template = 'html/' . $template . '.php';
        }

        if( ! empty( static::$_view_paths ) )
        {
            foreach( static::$_view_paths as $view_path )
            {
                if( file_exists( $view_path . $template ) )
                {
                    $template = $view_path . $template;
                    break;
                }
            }
        }

        if( ! file_exists( $template ) )
        {
            $template = __DIR__ . '/Views/' . $template;
        }

        if( ob_get_level() > 1 )
        {
            ob_end_flush();
        }

        $exception->code = $exception->code === 0 ? 500 : $exception->code;

        if( ! isset( $header ) )
        {
            if( array_key_exists( $exception->code, static::$_code_headers ) )
            {
                $header = static::$_code_headers[ $exception->code ];
            }
            elseif( array_key_exists( $exception->code, static::$_severity_errors ) )
            {
                $header = static::$_severity_errors[ $exception->code ];
            }
            else
            {
                $header = 'Internal Server Error';
            }
        }

        header( 'HTTP/1.1 500 Internal Server Error', TRUE, 500 );

        ob_start();
        include( $template );
        $buffer = ob_get_contents();
        ob_end_clean();
        echo $buffer;
    }

    // --------------------------------------------------------------------

    public static function shutdown_handler()
    {
        $last_error = error_get_last();

        if( isset( $last_error ) &&
            ( $last_error[ 'type' ] & ( E_ERROR | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING ) )
        )
        {
            static::error_handler( $last_error[ 'type' ], $last_error[ 'message' ], $last_error[ 'file' ], $last_error[ 'line' ] );
        }
    }
}